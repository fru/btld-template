// AUTOGENERATED
// The original file is literate/1-base-state.md

// PLEASE DO NOT EDIT THIS FILE DIRECTLY !


function isObject(value: unknown): value is object {
  return value !== null && typeof value === 'object';
}

function shallowCloneObject(value: object): object {
  if (Array.isArray(value)) return value.slice(0);
  return Object.assign({}, value);
}

class Cache<V> extends Map<any, V> {
  caching(key: any, creator?: (setCache: (V) => void) => void): V | undefined {
    if (!this.has(key) && creator) {
      // Stops infinite recursion issues
      this.set(key, undefined as V);
      // Create cache entry
      creator(c => this.set(key, c));
    }
    return this.get(key);
  }
}

const unchanged = Symbol('unchanged');

function createProxy(frozen: object, cache: Cache<object>) {
  return cache.caching(frozen, setCache => {
    const clone = shallowCloneObject(frozen);
    clone[unchanged] = frozen;

    const proxy = new Proxy(clone, {
      setPrototypeOf: () => false, // Disallow prototype

      // Write traps:
      set: function (target) {
        target[unchanged] = false;
        // @ts-ignore: next-line
        return Reflect.set(...arguments);
      },
      deleteProperty: function (target) {
        target[unchanged] = false;
        // @ts-ignore: next-line
        return Reflect.deleteProperty(...arguments);
      },

      // Read trap:
      get: function (target, p) {
        if (p === unchanged) return target[p];
        if (target[p] !== frozen[p]) return target[p];
        // Functions are still returned frozen
        if (!isObject(target[p])) return target[p];
        return createProxy(frozen[p], cache);
      },
    });
    setCache(proxy);
  });
}

function normalizeUnchangedMarker(root: object) {
  // Because this is an object graph, any object can have many parents
  const childToParents = new Map<object, object[]>();
  const changedDirectly = new Set<object>();

  const stopIterating = new Set();

  (function fillMappings(val: object) {
    if (val && !val[unchanged]) changedDirectly.add(val);
    stopIterating.add(val);

    for (var p in val) {
      let child = val[p];
      if (!isUnfrozenObject(child)) continue;
      // Fill parent map
      if (!childToParents.has(child)) childToParents.set(child, []);
      childToParents.get(child)!.push(val);
      // Recurse
      if (!stopIterating.has(child)) fillMappings(child);
    }
  })(root);

  function normalizeIterateParents(changed: object) {
    let parents = childToParents.get(changed) || [];
    for (let parent of parents) {
      if (!parent[unchanged]) continue;
      parent[unchanged] = false;
      normalizeIterateParents(parent);
    }
  }
  changedDirectly.forEach(normalizeIterateParents);
}

const frozen = Symbol('frozen');

function isUnfrozenObject(val: unknown): val is object {
  return isObject(val) && !val[frozen];
}

function freeze(root: unknown) {
  if (!isObject(root)) return Object.freeze(root);
  normalizeUnchangedMarker(root);
  const cloneCache = new Cache<object>();
  const result = cloneChanged(root, cloneCache);

  cloneCache.forEach(obj => {
    obj[frozen] = true;
    Object.freeze(obj);
  });
  return result;
}

function cloneChanged(val: unknown, cache: Cache<object>) {
  // Simple Cases - No cloning needed
  if (typeof val === 'function') return Object.freeze(val);
  if (!isUnfrozenObject(val)) return val;
  if (val[unchanged]) return val[unchanged];
  if (val instanceof Date) return val.toISOString();

  // Clone and recurse
  return cache.caching(val, setCache => {
    const cloned = shallowCloneObject(val);
    setCache(cloned);

    for (var prop in cloned) {
      cloned[prop] = cloneChanged(cloned[prop], cache);
    }
  });
}

export { isUnfrozenObject, Cache };

export class BaseState {
  __frozen = freeze({});

  frozen(prop: string) {
    return this.__frozen[prop];
  }

  update(action: (data: object) => void): void {
    const root = createProxy(this.__frozen, new Cache());
    action(root!);
    this.__frozen = freeze(root);
  }
}