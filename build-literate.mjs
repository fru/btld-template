import chokidar from 'chokidar';
import path from 'node:path';
import { fileURLToPath } from 'node:url';
import fs from 'node:fs';
import minimist from 'minimist';

// Config
const watch = 'literate';
const destination = 'literate/autogenerated';
const outExt = '.ts';
const glob = './*.md';

var argv = minimist(process.argv.slice(2));
const __dirname = path.dirname(fileURLToPath(import.meta.url));

const watcher = chokidar.watch(glob, {
  cwd: path.join(__dirname, watch),
  persistent: !!argv.watch,
});

watcher.on('add', compile).on('change', compile);

async function compile(relative) {
  let file = path.join(__dirname, watch, relative);
  let text = await fs.promises.readFile(file, 'utf8');
  let code = extract(text);
  let outParsed = path.parse(path.join(__dirname, destination, relative));
  let outFile = path.format({ ...outParsed, base: '', ext: outExt });
  fs.promises.writeFile(outFile, header(relative) + code, 'utf8');
  console.log(`Extract code: ${relative}`);
}

function extract(text, languages = ['typescript']) {
  let language = '(' + languages.filter(x => x).join('|') + ')';
  let regex = new RegExp('```' + language + '([\\s\\S]+?)```', 'g');
  let code = [...text.matchAll(regex)].map(m => m[2].trim());

  return code.join('\n');
}

function header(relative) {
  let original = watch + '/' + relative;
  let url = 'https://github.com/fru/btld/blob/main/' + original;
  let header = [
    '// AUTOGENERATED',
    '// The original file is ' + original,
    '',
    '// PLEASE DO NOT EDIT THIS FILE DIRECTLY !',
  ].join('\n');
  return header + '\n\n';
}
