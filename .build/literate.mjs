import fs from 'node:fs';
import path from 'node:path';

export function literate({ prefix, paths }, out, languages, test, outExt) {
  if (test) languages = addTestLanguages(languages);
  paths.forEach(p => {
    let file = path.resolve(prefix, p);
    let head = header(path.join(prefix, p));
    let code = extract(file, languages);
    let outFile = path.resolve(out, p);
    outFile = path.format({ ...path.parse(outFile), base: '', ext: outExt });
    fs.writeFileSync(outFile, head + code, 'utf8');
  });
  console.log('literate', files, out, languages, test);
}

export function markdown(languages, test) {
  if (test) languages = addTestLanguages(languages);
  return {
    name: 'md-code-extract',
    setup(build) {
      build.onLoad({ filter: /\.md$/ }, async args => {
        let head = header(args.path);
        let code = extract(args.path, languages);
        return {
          contents: head + code,
          loader: 'ts',
        };
      });
    },
  };
}

function addTestLanguages(languages) {
  return [...languages, ...languages.map(x => x + ' test')];
}

function extract(file, languages) {
  let text = fs.readFileSync(file, 'utf8');
  let language = '(' + languages.join('|') + ')';
  let regex = new RegExp('```' + language + '[\r?\n|\r]([\\s\\S]+?)```', 'g');
  let code = [...text.matchAll(regex)].map(m => m[2].trim());
  return code.join('\n\n');
}

function header(path) {
  let header = [
    '// AUTOGENERATED',
    '// The original file is ' + path,
    '',
    '// PLEASE DO NOT EDIT THIS FILE DIRECTLY !',
  ].join('\n');
  return header + '\n\n\n';
}
